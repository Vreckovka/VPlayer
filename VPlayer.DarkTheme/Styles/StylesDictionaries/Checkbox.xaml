<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

  <ResourceDictionary.MergedDictionaries>
    <ResourceDictionary Source="pack://application:,,,/VCore.WPF;component/StylesDictionaries/Paths.xaml" />
    <ResourceDictionary Source="pack://application:,,,/VPlayer.DarkTheme;component/Styles/StylesDictionaries/Colors.xaml" />
    <ResourceDictionary Source="pack://application:,,,/VCore.WPF;component/StylesDictionaries/Fonts.xaml" />
    <ResourceDictionary Source="pack://application:,,,/VPlayer.DarkTheme;component/Styles/StylesDictionaries/Menu.xaml" />
  </ResourceDictionary.MergedDictionaries>

  <Style x:Key="{x:Type CheckBox}" TargetType="{x:Type CheckBox}">
    <Setter Property="SnapsToDevicePixels" Value="true" />
    <Setter Property="OverridesDefaultStyle" Value="true" />
    <Setter Property="Foreground" Value="#757575" />
    <Setter Property="BorderBrush" Value="#454545" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="Cursor" Value="Hand" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type CheckBox}">
          <Border
            x:Name="Border"
            Padding="0,0"
            Background="{TemplateBinding Background}"
            BorderThickness="1">
            <Grid>
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
              </Grid.ColumnDefinitions>

              <Border
                x:Name="Check"
                Width="15"
                Height="15"
                Margin="0,0,10,0"
                Padding="1"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="1">

                <Path
                  x:Name="CheckMark"
                  Width="8"
                  Height="8"
                  Fill="{StaticResource DefaultWhiteBrush}"
                  SnapsToDevicePixels="False"
                  StrokeThickness="2"
                  Style="{StaticResource CheckMark}"
                  Visibility="Hidden" />
              </Border>
              <ContentPresenter
                x:Name="HeaderHost"
                Grid.Column="1"
                HorizontalAlignment="Left"
                VerticalAlignment="Center"
                RecognizesAccessKey="True" />
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="true">
              <Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
              <Trigger.EnterActions>
                <RemoveStoryboard BeginStoryboardName="IsChecked" />
                <RemoveStoryboard BeginStoryboardName="ExitHighlitedChecked" />

                <BeginStoryboard>
                  <Storyboard>
                    <ColorAnimation
                      Storyboard.TargetProperty="(TextBox.Foreground).(SolidColorBrush.Color)"
                      To="White"
                      Duration="0" />

                  </Storyboard>
                </BeginStoryboard>
              </Trigger.EnterActions>

              <Trigger.ExitActions>
                <BeginStoryboard x:Name="IsChecked">
                  <Storyboard>
                    <ColorAnimation
                      Storyboard.TargetProperty="(TextBox.Foreground).(SolidColorBrush.Color)"
                      To="#757575"
                      Duration="0" />
                  </Storyboard>
                </BeginStoryboard>
              </Trigger.ExitActions>
            </Trigger>

            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsChecked" Value="true" />
              </MultiTrigger.Conditions>
              <MultiTrigger.EnterActions>
                <RemoveStoryboard BeginStoryboardName="ExitHighlitedChecked" />

                <BeginStoryboard x:Name="EnterHighlitedChecked">
                  <Storyboard>
                    <ColorAnimation
                      Storyboard.TargetName="Check"
                      Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)"
                      To="#858585"
                      Duration="{StaticResource MenuHoverAnimationDuration}" />

                  </Storyboard>
                </BeginStoryboard>
              </MultiTrigger.EnterActions>
              <MultiTrigger.ExitActions>
                <RemoveStoryboard BeginStoryboardName="EnterHighlitedChecked" />
                <BeginStoryboard x:Name="ExitHighlitedChecked">
                  <Storyboard>
                    <ColorAnimation
                      Storyboard.TargetName="Check"
                      Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)"
                      To="#454545"
                      Duration="{StaticResource MenuHoverAnimationDuration}" />
                  </Storyboard>
                </BeginStoryboard>
              </MultiTrigger.ExitActions>
            </MultiTrigger>

            <Trigger Property="IsEnabled" Value="false">
              <Setter Property="Foreground">
                <Setter.Value>
                  <SolidColorBrush Color="{StaticResource DisabledForegroundColor}" />
                </Setter.Value>
              </Setter>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>


  <Style x:Key="ButtonFocusVisual">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Rectangle
            Margin="2"
            SnapsToDevicePixels="true"
            Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
            StrokeDashArray="1 2"
            StrokeThickness="1" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <LinearGradientBrush x:Key="ButtonNormalBackground" StartPoint="0,0" EndPoint="0,1">
    <GradientStop Offset="0" Color="#F3F3F3" />
    <GradientStop Offset="0.5" Color="#EBEBEB" />
    <GradientStop Offset="0.5" Color="#DDDDDD" />
    <GradientStop Offset="1" Color="#CDCDCD" />
  </LinearGradientBrush>
  <SolidColorBrush x:Key="ButtonNormalBorder" Color="#FF707070" />
  <Style x:Key="ToggleButtonStyle1" TargetType="{x:Type ToggleButton}">
    <Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="{StaticResource ButtonNormalBorder}" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="Foreground" Value="White" />
    <Setter Property="Cursor" Value="Hand" />
    <Setter Property="FontWeight" Value="DemiBold" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="Padding" Value="15,5" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Border
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}"
            CornerRadius="3">
            <StackPanel Orientation="Horizontal">
              <Border x:Name="on" Padding="{TemplateBinding Padding}">
                <TextBlock
                  x:Name="onText"
                  HorizontalAlignment="Center"
                  VerticalAlignment="Center"
                  FontWeight="{TemplateBinding FontWeight}"
                  Text="On" />
              </Border>
              <Border x:Name="off" Padding="{TemplateBinding Padding}">
                <TextBlock
                  x:Name="offText"
                  HorizontalAlignment="Center"
                  VerticalAlignment="Center"
                  FontWeight="{TemplateBinding FontWeight}"
                  Text="Off" />
              </Border>
            </StackPanel>
          </Border>

          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="false">
              <Setter Property="Foreground" Value="#ADADAD" />
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
              <Setter TargetName="on" Property="Background" Value="green" />
              <Setter TargetName="onText" Property="Foreground" Value="White" />
            </Trigger>
            <Trigger Property="IsChecked" Value="False">
              <Setter TargetName="off" Property="Background" Value="red" />
              <Setter TargetName="offText" Property="Foreground" Value="White" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

</ResourceDictionary>