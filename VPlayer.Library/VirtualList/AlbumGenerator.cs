using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Windows.Navigation;
using VPlayer.AudioStorage.DomainClasses;
using VPlayer.Core.ViewModels.Artists;

namespace VPlayer.Library.VirtualList
{
  public class PagedEmployeeRepository<TViewModel, TModel> where TViewModel : INamedEntityViewModel<TModel>
  where TModel : INamedEntity
  {
    #region Fields

    public int NumberOfEmployees = -1;
    public readonly TViewModel[] source;
    private TViewModel[] _cache;
    private int _pageSize = 40;

    #endregion Fields

    #region Constructors

    public PagedEmployeeRepository(TViewModel[] source)
    {
      this.source = source ?? throw new ArgumentNullException(nameof(source));
      NumberOfEmployees = source.Length;
    }

    #endregion Constructors

    #region Properties

    public int PageCursor { get; set; }

    public int PageSize
    {
      get { return _pageSize; }
      set { _pageSize = value; }
    }

    private int PageCursorStartIndex
    {
      get { return PageCursor * PageSize; }
    }

    #endregion Properties

    #region Methods

    public void Clear()
    {
      _cache = null;
    }

    public int Count()
    {
      var employees = DoLoadPage();
      _cache = new TViewModel[NumberOfEmployees];
      UpdateCache(employees);
      return NumberOfEmployees;
    }

    public TViewModel GetAt(int index)
    {
      if (index < NumberOfEmployees && _cache[index] == null)
      {
        PageCursor = index / PageSize;
        LoadPage();
      }
      if (index >= NumberOfEmployees)
        throw new ArgumentException(string.Format("employee index [{0}] is exceed the upper boundary [{1}]", index,
            NumberOfEmployees));
      return _cache[index];
    }

    public int IndexOf(TViewModel employee)
    {
      var result =
          _cache.Where(each => each != null && each.Name == employee.Name).Select((each, index) => new { Position = index, employee }).
              FirstOrDefault();
      return result != null ? result.Position : -1;
    }

    protected virtual List<TViewModel> DoLoadPage()
    {
      var employees = new List<TViewModel>();
      for (int i = PageCursorStartIndex; i < PageCursorStartIndex + PageSize; i++)
      {
        if (source.Length > i)
        {
          Thread.Sleep(TimeSpan.FromMilliseconds(1));
          employees.Add(source[i]);
        }
      }
      return employees;
    }

    protected List<TViewModel> LoadPage()
    {
      var employees = DoLoadPage();
      UpdateCache(employees);
      return employees;
    }

    private void UpdateCache(List<TViewModel> compounds)
    {
      for (int i = PageCursorStartIndex; i < PageCursorStartIndex + compounds.Count; i++)
      {
        if (i < _cache.Length)
          _cache[i] = compounds[i - PageCursorStartIndex];
      }
    }

    #endregion Methods
  }

  public class PlayableItemsGenerator<TViewModel, TModel> : IObjectGenerator<TViewModel>
          where TViewModel : class, INamedEntityViewModel<TModel>
        where TModel : INamedEntity
  {
    #region Fields

    public readonly PagedEmployeeRepository<TViewModel, TModel> _repository;

    #endregion Fields

    #region Constructors

    public PlayableItemsGenerator(IEnumerable<TViewModel> source)
    {
      _repository = new PagedEmployeeRepository<TViewModel, TModel>(source.ToArray());
    }

    #endregion Constructors

    #region IObjectGenerator<SampleObject> Members

    /// <summary>
    /// Number of items that are generated by this object.
    /// </summary>
    public int Count
    {
      get
      {
        // Return the number of objects in the array
        return _repository.Count();
      }
    }

    /// <summary>
    /// Create the object at the specified index.
    /// </summary>
    /// <param name="index">Object index.</param>
    /// <returns>New object instance.</returns>
    public TViewModel CreateObject(int index)
    {
      return _repository.GetAt(index);
    }

    public TViewModel[] AllItems => _repository.source;

    #endregion IObjectGenerator<SampleObject> Members
  }
}