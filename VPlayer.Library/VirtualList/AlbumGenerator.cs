using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using VirtualListWithPagingTechnique;
using VPlayer.AudioStorage;
using VPlayer.AudioStorage.Interfaces;
using VPlayer.AudioStorage.Models;
using VPlayer.Library.Annotations;
using VPlayer.Library.ViewModels;
using VPlayer.Library.ViewModels.ArtistsViewModels;

namespace VPlayer.Library.VirtualList
{
    public class PlayableItemsGenerator<TModel> : IObjectGenerator<TModel> where TModel : class, IPlayableViewModel
    {
        private readonly PagedEmployeeRepository<TModel> _repository;
        //public PlayableItemsGenerator()
        //{
        //    using (IStorage storage = StorageManager.GetStorage())
        //    {
        //        var itemsEnumerable = storage.GetItems<TModel>();

        //        if (itemsEnumerable != null)
        //            _repository = new PagedEmployeeRepository<TModel>(itemsEnumerable.ToArray());
        //    }
        //}

        public PlayableItemsGenerator(IEnumerable<TModel> source)
        {
            _repository = new PagedEmployeeRepository<TModel>(source.ToArray());
        }

        #region IObjectGenerator<SampleObject> Members
        /// <summary>
        /// Number of items that are generated by this object.
        /// </summary>
        public int Count
        {
            get
            {
                // Return the number of objects in the array
                return _repository.Count();
            }
        }

        /// <summary>
        /// Create the object at the specified index.
        /// </summary>
        /// <param name="index">Object index.</param>
        /// <returns>New object instance.</returns>
        public TModel CreateObject(int index)
        {
            return _repository.GetAt(index);
        }
        #endregion
    }

    public class PagedEmployeeRepository<TModel> where TModel : IPlayableViewModel
    {
        private readonly TModel[] source;
        private  TModel[] _cache;
        public int NumberOfEmployees = -1;

        public PagedEmployeeRepository([NotNull] TModel[] source)
        {
            this.source = source ?? throw new ArgumentNullException(nameof(source));
            NumberOfEmployees = source.Length;
        }

        public int PageCursor { get; set; }

        private int _pageSize = 40;

        public int PageSize
        {
            get { return _pageSize; }
            set { _pageSize = value; }
        }

        private int PageCursorStartIndex
        {
            get { return PageCursor * PageSize; }
        }

        public void Clear()
        {
            _cache = null;
        }

        public int Count()
        {
            var employees = DoLoadPage();
            _cache = new TModel[NumberOfEmployees];
            UpdateCache(employees);
            return NumberOfEmployees;
        }

        protected List<TModel> LoadPage()
        {
            var employees = DoLoadPage();
            UpdateCache(employees);
            return employees;
        }

        protected virtual List<TModel> DoLoadPage()
        {
            var employees = new List<TModel>();
            for (int i = PageCursorStartIndex; i < PageCursorStartIndex + PageSize; i++)
            {
                if (source.Length > i)
                {
                    Thread.Sleep(TimeSpan.FromMilliseconds(1));
                    employees.Add(source[i]);
                }
            }
            return employees;
        }

        private void UpdateCache(List<TModel> compounds)
        {
            for (int i = PageCursorStartIndex; i < PageCursorStartIndex + compounds.Count; i++)
            {
                if (i < _cache.Length)
                    _cache[i] = compounds[i - PageCursorStartIndex];
            }
        }

        public TModel GetAt(int index)
        {
            if (index < NumberOfEmployees && _cache[index] == null)
            {
                PageCursor = index / PageSize;
                LoadPage();
            }
            if (index >= NumberOfEmployees)
                throw new ArgumentException(string.Format("employee index [{0}] is exceed the upper boundary [{1}]", index,
                    NumberOfEmployees));
            return _cache[index];
        }

        public int IndexOf(TModel employee)
        {
            var result =
                _cache.Where(each => each != null && each.Name == employee.Name).Select((each, index) => new { Position = index, employee }).
                    FirstOrDefault();
            return result != null ? result.Position : -1;
        }
    }
}
